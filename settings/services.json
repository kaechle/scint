{
    "channels": {
        "name": "Channels",
        "import_path": "scint.services.channels",
        "settings": {}
    },
    "intelligence": {
        "name": "Intelligence",
        "import_path": "scint.services.intelligence",
        "settings": {
            "presets": {
                "deterministic": {
                    "model": "gpt-4o-2024-08-06",
                    "temperature": 0.4,
                    "top_p": 1.2,
                    "presence_penalty": 0.0,
                    "frequency_penalty": 0.0
                },
                "balanced": {
                    "model": "gpt-4o-2024-08-06",
                    "temperature": 1.4,
                    "top_p": 0.6,
                    "presence_penalty": 0.25,
                    "frequency_penalty": 0.25
                },
                "creative": {
                    "model": "gpt-4o-2024-08-06",
                    "temperature": 1.7,
                    "top_p": 0.6,
                    "presence_penalty": 0.45,
                    "frequency_penalty": 0.45
                },
                "router": {
                    "model": "gpt-4o-2024-08-06",
                    "temperature": 0.5,
                    "top_p": 1.4,
                    "presence_penalty": 2.0,
                    "frequency_penalty": 2.0,
                    "tool_choice": {
                        "type": "function",
                        "function": { "name": "route_message" }
                    }
                },
                "image": {
                    "quality": "hd",
                    "size": "1024x1024",
                    "n": 1,
                    "style": "vibrant"
                },
                "embedding": { "model": "text-embeddings-3-small" }
            },
            "providers": {
                "openai": {
                    "api_keys": "OPENAI_API_KEY",
                    "module": "AsyncOpenAI",
                    "response_paths": [
                        "choices.0.message.content",
                        "choices.0.message.tool_calls",
                        "choices.0.data"
                    ],
                    "format": {
                        "completion": {
                            "models": {
                                "gpt4o": "gpt-4o",
                                "gpt4": "gpt-4",
                                "gpt35": "gpt-3.5-turbo"
                            },
                            "method": "AsyncOpenAI().beta.chat.completions.parse",
                            "parameters": {
                                "model": "string",
                                "temperature": 1.0,
                                "top_p": 0.9,
                                "presence_penalty": 0.25,
                                "frequency_penalty": 0.25,
                                "logprobs": false,
                                "top_logprobs": 0,
                                "stream": false,
                                "stop": null,
                                "seed": null,
                                "messages": [],
                                "tools": [],
                                "tool_choice": {}
                            }
                        },
                        "image": {
                            "models": { "dalle3": "dall-e-3" },
                            "method": "AsyncOpenAI().images.generate",
                            "parameters": {
                                "model": "dall-e-3",
                                "prompt": "string",
                                "quality": "hd",
                                "size": "1024x1024",
                                "n": 1
                            }
                        },
                        "speech": {
                            "models": ["tts-1", "tts-1-hd"],
                            "method": "AsyncOpenAI().audio.speech.create",
                            "parameters": {
                                "model": "string",
                                "input": "string",
                                "voice": "string",
                                "response_format": "string",
                                "speed": 1.0
                            }
                        },
                        "embedding": {
                            "models": {
                                "embeddings_small": "text-embeddings-3-small",
                                "embeddings_large": "text-embeddings-3-large"
                            },
                            "method": "AsyncOpenAI().embeddings.create",
                            "parameters": {
                                "model": "string",
                                "input": "string"
                            }
                        }
                    }
                },
                "anthropic": {
                    "api_key": "ANTHROPIC_API_KEY",
                    "format": {
                        "method": "Anthropic.completions.create",
                        "completions": {
                            "models": {
                                "claude3_opus": "claude-3-opus-20240229"
                            },
                            "parameters": {
                                "model": "string",
                                "temperature": 1.0
                            }
                        }
                    }
                }
            }
        }
    },
    "relay": {
        "name": "Relay",
        "import_path": "scint.services.relay",
        "settings": {}
    },
    "search": {
        "name": "Search",
        "import_path": "scint.services.search",
        "settings": {
            "prompts": [
                {
                    "name": "core_instructions",
                    "description": "Core instructions prompt..",
                    "labels": ["Instructions prompt."],
                    "blocks": [
                        {
                            "type": "text",
                            "data": "Make sure all semantic blocks of content are enclosed within individual message format blocks. The parsing system is designed to treat headings, paragraphs, markdown blocks, and all other content that's typically broken with newline characters. Do NOT use newline characters in your formatting."
                        },
                        {
                            "type": "text",
                            "data": "Be sure to include semantic labels and an annotation for all messages. Write annotations to help guide and remind yourself of key facts or important moments."
                        },
                        {
                            "type": "text",
                            "data": "Be sure to include semantic labels and an annotation for all messages. Write annotations to help guide and remind yourself of key facts or important moments."
                        }
                    ],
                    "role": "system"
                },
                {
                    "name": "core_identity",
                    "description": "Core identity prompt used for all non-process compositions.",
                    "labels": ["Personality prompt."],
                    "blocks": [
                        {
                            "type": "text",
                            "data": "You are a component of Scint, an intelligent system utilizing multiple cutting-edge language models, sophisticated composition and memory augmentations, and unparalleled flexibility. You are no assistantâ€”you are a tutor, guide, mentor designed for accurate, lifelike interactions and expert guidance. Perform accordingly."
                        }
                    ],
                    "role": "system"
                }
            ],
            "functions": [
                {
                    "name": "use_terminal",
                    "description": "Executes shell commands asynchronously and yields the output and errors.",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "commands": {
                                "type": "string",
                                "description": "The shell commands to be executed."
                            }
                        },
                        "required": ["commands"]
                    }
                },
                {
                    "name": "search_github_repos",
                    "description": "Asynchronously searches for GitHub repositories based on a query string.",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "query": {
                                "type": "string",
                                "description": "The search query string used to find repositories on GitHub."
                            }
                        },
                        "required": ["query"]
                    }
                }
            ]
        }
    }
}
